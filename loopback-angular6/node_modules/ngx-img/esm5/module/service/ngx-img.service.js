import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { getMimeType } from '../utils';
var NgxImgService = /** @class */ (function () {
    function NgxImgService() {
    }
    NgxImgService.prototype.compress = function (src, config) {
        var mimeType = getMimeType(src);
        return new Promise(function (resolve, reject) {
            var img = new Image();
            img.src = src;
            img.onerror = function () {
                reject();
            };
            img.onload = function () {
                var cvs = document.createElement('canvas');
                var ctx = cvs.getContext('2d');
                var aspectRatio = img.naturalWidth / img.naturalHeight;
                var maxWidth = config.maxWidth ? config.maxWidth : Infinity;
                var maxHeight = config.maxHeight ? config.maxHeight : Infinity;
                var minWidth = config.minWidth ? config.minWidth : 0;
                var minHeight = config.minHeight ? config.minHeight : 0;
                var width = img.naturalWidth;
                var height = img.naturalHeight;
                if (maxWidth < Infinity && maxHeight < Infinity) {
                    if (maxHeight * aspectRatio > maxWidth) {
                        maxHeight = maxWidth / aspectRatio;
                    }
                    else {
                        maxWidth = maxHeight * aspectRatio;
                    }
                }
                else if (maxWidth < Infinity) {
                    maxHeight = maxWidth / aspectRatio;
                }
                else if (maxHeight < Infinity) {
                    maxWidth = maxHeight * aspectRatio;
                }
                if (minWidth > 0 && minHeight > 0) {
                    if (minHeight * aspectRatio > minWidth) {
                        minHeight = minWidth / aspectRatio;
                    }
                    else {
                        minWidth = minHeight * aspectRatio;
                    }
                }
                else if (minWidth > 0) {
                    minHeight = minWidth / aspectRatio;
                }
                else if (minHeight > 0) {
                    minWidth = minHeight * aspectRatio;
                }
                width = Math.min(Math.max(width, minWidth), maxWidth);
                height = Math.min(Math.max(height, minHeight), maxHeight);
                var destX = -width / 2;
                var destY = -height / 2;
                var destWidth = width;
                var destHeight = height;
                cvs.width = width;
                cvs.height = height;
                ctx.translate(width / 2, height / 2);
                ctx.scale(1, 1);
                ctx.drawImage(img, Math.floor(destX), Math.floor(destY), Math.floor(destWidth), Math.floor(destHeight));
                ctx.restore();
                resolve(cvs.toDataURL(mimeType, config.quality));
            };
        });
    };
    NgxImgService = __decorate([
        Injectable()
    ], NgxImgService);
    return NgxImgService;
}());
export { NgxImgService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWltZy8iLCJzb3VyY2VzIjpbIm1vZHVsZS9zZXJ2aWNlL25neC1pbWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBR3JDO0lBQUE7SUF1RUEsQ0FBQztJQXRFQyxnQ0FBUSxHQUFSLFVBQVMsR0FBVyxFQUFFLE1BQVc7UUFDL0IsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFZLEVBQUUsTUFBVztZQUMzQyxJQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3hCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBQ2QsR0FBRyxDQUFDLE9BQU8sR0FBRztnQkFDWixNQUFNLEVBQUUsQ0FBQztZQUNYLENBQUMsQ0FBQztZQUNGLEdBQUcsQ0FBQyxNQUFNLEdBQUc7Z0JBQ1gsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDN0MsSUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakMsSUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO2dCQUV6RCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7Z0JBQzVELElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztnQkFD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QyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBdEVVLGFBQWE7UUFEekIsVUFBVSxFQUFFO09BQ0EsYUFBYSxDQXVFekI7SUFBRCxvQkFBQztDQUFBLEFBdkVELElBdUVDO1NBdkVZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtnZXRNaW1lVHlwZX0gZnJvbSAnLi4vdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4SW1nU2VydmljZSB7XG4gIGNvbXByZXNzKHNyYzogc3RyaW5nLCBjb25maWc6IGFueSkge1xuICAgIGNvbnN0IG1pbWVUeXBlID0gZ2V0TWltZVR5cGUoc3JjKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1nLnNyYyA9IHNyYztcbiAgICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3QoKTtcbiAgICAgIH07XG4gICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY29uc3QgY3R4ID0gY3ZzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gaW1nLm5hdHVyYWxXaWR0aCAvIGltZy5uYXR1cmFsSGVpZ2h0O1xuXG4gICAgICAgIGxldCBtYXhXaWR0aCA9IGNvbmZpZy5tYXhXaWR0aCA/IGNvbmZpZy5tYXhXaWR0aCA6IEluZmluaXR5O1xuICAgICAgICBsZXQgbWF4SGVpZ2h0ID0gY29uZmlnLm1heEhlaWdodCA/IGNvbmZpZy5tYXhIZWlnaHQgOiBJbmZpbml0eTtcbiAgICAgICAgbGV0IG1pbldpZHRoID0gY29uZmlnLm1pbldpZHRoID8gY29uZmlnLm1pbldpZHRoIDogMDtcbiAgICAgICAgbGV0IG1pbkhlaWdodCA9IGNvbmZpZy5taW5IZWlnaHQgPyBjb25maWcubWluSGVpZ2h0IDogMDtcblxuICAgICAgICBsZXQgd2lkdGggPSBpbWcubmF0dXJhbFdpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gaW1nLm5hdHVyYWxIZWlnaHQ7XG5cbiAgICAgICAgaWYgKG1heFdpZHRoIDwgSW5maW5pdHkgJiYgbWF4SGVpZ2h0IDwgSW5maW5pdHkpIHtcbiAgICAgICAgICBpZiAobWF4SGVpZ2h0ICogYXNwZWN0UmF0aW8gPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gbWF4V2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4V2lkdGggPSBtYXhIZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWF4V2lkdGggPCBJbmZpbml0eSkge1xuICAgICAgICAgIG1heEhlaWdodCA9IG1heFdpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgIH0gZWxzZSBpZiAobWF4SGVpZ2h0IDwgSW5maW5pdHkpIHtcbiAgICAgICAgICBtYXhXaWR0aCA9IG1heEhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1pbldpZHRoID4gMCAmJiBtaW5IZWlnaHQgPiAwKSB7XG4gICAgICAgICAgaWYgKG1pbkhlaWdodCAqIGFzcGVjdFJhdGlvID4gbWluV2lkdGgpIHtcbiAgICAgICAgICAgIG1pbkhlaWdodCA9IG1pbldpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1pbldpZHRoID0gbWluSGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1pbldpZHRoID4gMCkge1xuICAgICAgICAgIG1pbkhlaWdodCA9IG1pbldpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgIH0gZWxzZSBpZiAobWluSGVpZ2h0ID4gMCkge1xuICAgICAgICAgIG1pbldpZHRoID0gbWluSGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICB3aWR0aCA9IE1hdGgubWluKE1hdGgubWF4KHdpZHRoLCBtaW5XaWR0aCksIG1heFdpZHRoKTtcbiAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4oTWF0aC5tYXgoaGVpZ2h0LCBtaW5IZWlnaHQpLCBtYXhIZWlnaHQpO1xuXG4gICAgICAgIGNvbnN0IGRlc3RYID0gLXdpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgZGVzdFkgPSAtaGVpZ2h0IC8gMjtcbiAgICAgICAgY29uc3QgZGVzdFdpZHRoID0gd2lkdGg7XG4gICAgICAgIGNvbnN0IGRlc3RIZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgY3ZzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGN2cy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgY3R4LnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgICAgICBjdHguc2NhbGUoMSwgMSk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgaW1nLFxuICAgICAgICAgIE1hdGguZmxvb3IoZGVzdFgpLFxuICAgICAgICAgIE1hdGguZmxvb3IoZGVzdFkpLFxuICAgICAgICAgIE1hdGguZmxvb3IoZGVzdFdpZHRoKSxcbiAgICAgICAgICBNYXRoLmZsb29yKGRlc3RIZWlnaHQpXG4gICAgICAgICk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIHJlc29sdmUoY3ZzLnRvRGF0YVVSTChtaW1lVHlwZSwgY29uZmlnLnF1YWxpdHkpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==