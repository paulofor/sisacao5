import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';
import { NgxImgService } from '../service/ngx-img.service';
let NgxImgComponent = class NgxImgComponent {
    constructor(_service, _ref) {
        this._service = _service;
        this._ref = _ref;
        this.alt = '';
        this.fileName = '';
        this.imgSrc = '';
        this.remove = true;
        this.hasPreview = false;
        this.hasError = false;
        this.isLoading = false;
        this._config = {
            fileSize: 2048,
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0,
            fileType: ['.gif', '.jpeg', '.png', '.jpg'],
            quality: 0.8
        };
        this._text = {
            default: 'Drag and drop',
            _default: 'Drag and drop or click',
            button: 'Choose File',
            try_again: 'Try Again',
            replace: 'Drag and drop or click to replace',
            reset: 'Remove',
            error: 'Oops, something wrong happened.'
        };
        this._errorTexts = {
            fileSize: 'The file size is too big ({{ value }} max).',
            minWidth: 'The image width is too small ({{ value }}}px min).',
            maxWidth: 'The image width is too big ({{ value }}}px max).',
            minHeight: 'The image height is too small ({{ value }}}px min).',
            maxHeight: 'The image height is too big ({{ value }}}px max).',
            imageFormat: 'The image format is not allowed ({{ value }} only).',
            fileType: 'The file type is not allowed.'
        };
        this.errors = [];
        this.mode = 'upload';
        this.onChange = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onReset = new EventEmitter();
        this.reset();
    }
    ngOnInit() {
        this._text = Object.assign(this._text, this.text);
        this._errorTexts = Object.assign(this._errorTexts, this.errorTexts);
        this._config = Object.assign(this._config, this.config);
        this.markForCheck();
    }
    ngOnChanges(changes) {
        if (changes.imgSrc && changes.imgSrc.isFirstChange()) {
            if (this.imgSrc) {
                this.hasPreview = true;
                if (this.config && this.config.crop) {
                    this.mode = 'crop';
                }
                this.markForCheck();
            }
        }
    }
    fileChangeListener(e) {
        this.hasError = false;
        this.errors = [];
        if (!e.target.files.length) {
            this.reset();
            return false;
        }
        this.file = e.target.files[0];
        if (!this.validate()) {
            this.hasError = true;
            this.reset();
            return false;
        }
        this.fileName = this.file.name;
        this.onChange.emit(this.file);
        if (this.file.type.split('/')[0] === 'image') {
            this.isLoading = true;
            const reader = new FileReader();
            reader.onloadend = (ev) => {
                this.imgSrc = ev.target.result;
                this.fileName = this.file.name;
                this.hasPreview = true;
                this.isLoading = false;
                if (this._config.crop) {
                    this.mode = 'crop';
                    this.markForCheck();
                }
                else {
                    this._service.compress(this.imgSrc, this._config).then((res) => {
                        this.onSelectEvent(res);
                        this.markForCheck();
                    })
                        .catch(() => {
                        this.onSelectEvent(this.imgSrc);
                        this.markForCheck();
                    });
                }
            };
            reader.readAsDataURL(this.file);
            this.markForCheck();
        }
        this.markForCheck();
    }
    reset() {
        this.mode = 'upload';
        this.file = null;
        this.imgSrc = '';
        this.fileName = '';
        this.hasPreview = false;
        if (this.fileInput) {
            this.fileInput.nativeElement.value = '';
        }
        this.onReset.emit();
        this.markForCheck();
    }
    validate() {
        this.errors = [];
        if (this._config.fileType.length !== 0 &&
            this._config.fileType.indexOf(this.file.type) === -1 && this._config.fileType.indexOf(`.${this.file.name.split('.').pop()}`) === -1) {
            this.errors = [...this.errors, this._errorTexts.fileType];
        }
        if (this._config.fileSize !== 0 && (this.file.size / 1024) > this._config.fileSize) {
            this.errors = [...this.errors, this._errorTexts.fileSize.replace('{{ value }}', this.sizeToByte(this._config.fileSize))];
        }
        if (this._config.minWidth !== 0 && this._config.minWidth >= this.file.width) {
            this.errors = [...this.errors, this._errorTexts.minWidth.replace('{{ value }}', this._config.minWidth.toString())];
        }
        if (this._config.maxWidth !== 0 && this._config.maxWidth <= this.file.width) {
            this.errors = [...this.errors, this._errorTexts.maxWidth.replace('{{ value }}', this._config.maxWidth.toString())];
        }
        if (this._config.minHeight !== 0 && this._config.minHeight >= this.file.height) {
            this.errors = [...this.errors, this._errorTexts.minHeight.replace('{{ value }}', this._config.minHeight.toString())];
        }
        if (this._config.maxHeight !== 0 && this._config.maxHeight <= this.file.height) {
            this.errors = [...this.errors, this._errorTexts.maxHeight.replace('{{ value }}', this._config.maxHeight.toString())];
        }
        return !this.errors.length;
    }
    sizeToByte(size) {
        const units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        let i = 0;
        while (size >= 1024) {
            size /= 1024;
            ++i;
        }
        return size.toFixed(1) + ' ' + units[i];
    }
    ;
    onSelectEvent(data) {
        this.onSelect.emit(data);
        this.markForCheck();
    }
    markForCheck() {
        setTimeout(() => {
            if (!this._ref['destroyed']) {
                this._ref.markForCheck();
                this._ref.detectChanges();
            }
        });
        setTimeout(() => {
            if (!this._ref['destroyed']) {
                this._ref.markForCheck();
                this._ref.detectChanges();
            }
        }, 300);
    }
    ngOnDestroy() {
        this.reset();
        this._ref.detach();
    }
};
NgxImgComponent.ctorParameters = () => [
    { type: NgxImgService },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], NgxImgComponent.prototype, "alt", void 0);
__decorate([
    Input()
], NgxImgComponent.prototype, "fileName", void 0);
__decorate([
    Input()
], NgxImgComponent.prototype, "imgSrc", void 0);
__decorate([
    Input()
], NgxImgComponent.prototype, "remove", void 0);
__decorate([
    ViewChild('fileInput')
], NgxImgComponent.prototype, "fileInput", void 0);
__decorate([
    Input()
], NgxImgComponent.prototype, "config", void 0);
__decorate([
    Input()
], NgxImgComponent.prototype, "errorTexts", void 0);
__decorate([
    Input()
], NgxImgComponent.prototype, "text", void 0);
__decorate([
    Output()
], NgxImgComponent.prototype, "onChange", void 0);
__decorate([
    Output()
], NgxImgComponent.prototype, "onSelect", void 0);
__decorate([
    Output()
], NgxImgComponent.prototype, "onReset", void 0);
NgxImgComponent = __decorate([
    Component({
        selector: 'ngx-img',
        template: "<ng-container [ngSwitch]=\"mode\">\n  <ng-template [ngSwitchCase]=\"'upload'\">\n    <div class=\"ngx-img-wrapper\" [class.has-preview]=\"hasPreview\" [class.has-error]=\"hasError\"\n         [style.height]=\"_config.height\">\n      <div class=\"ngx-img-message\" *ngIf=\"!hasPreview\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox=\"0 0 640 640\" class=\"ngx-img-upload\">\n          <path class=\"st-1\"\n                d=\"M411.312 372.688l-64-64c-6.247-6.248-16.379-6.248-22.627 0l-64 64c-6.248 6.247-6.248 16.379 0 22.627s16.379 6.248 22.628 0l36.687-36.687v137.372c0 8.837 7.163 16 16 16s16-7.163 16-16v-137.372l36.688 36.687c3.123 3.123 7.217 4.685 11.312 4.685s8.189-1.562 11.312-4.688c6.25-6.247 6.25-16.377 0-22.624z\"></path>\n          <path class=\"st-2\"\n                d=\"M512.2 512h-112.2c-8.837 0-16-7.163-16-16s7.163-16 16-16h112.2c52.824 0 95.8-42.976 95.8-95.8s-42.976-95.8-95.8-95.8c-11.33 0-22.371 1.938-32.817 5.764-6.979 2.555-14.798-0.031-18.876-6.243s-3.343-14.415 1.776-19.803c11.425-12.022 17.717-27.692 17.717-44.118 0-35.29-28.71-64-64-64-20.536 0-39.32 9.492-51.535 26.042-7.374 9.991-11.668 21.692-12.417 33.836-0.419 6.781-5.073 12.558-11.609 14.409-6.539 1.854-13.53-0.629-17.441-6.182-3.52-4.998-7.331-9.814-11.329-14.314-30.367-34.185-73.984-53.791-119.669-53.791-88.224 0-160 71.775-160 160s71.776 160 160 160h80c8.836 0 16 7.163 16 16s-7.164 16-16 16h-80c-105.869 0-192-86.131-192-192s86.131-192 192-192c51.271 0 100.368 20.573 136.315 56.791 2.802-6.217 6.28-12.168 10.402-17.752 18.044-24.445 46.933-39.039 77.283-39.039 52.935 0 96 43.065 96 96 0 11.223-1.949 22.202-5.685 32.532 1.954-0.089 3.917-0.132 5.885-0.132 70.469 0 127.8 57.331 127.8 127.8s-57.331 127.8-127.8 127.8z\"></path>\n        </svg>\n        <ng-template [ngIf]=\"!hasError\" [ngIfElse]=\"withErrorBlock\">\n          <p>{{ _text.default }}</p>\n          <button class=\"ngx-img-button\">{{ _text.button }}</button>\n        </ng-template>\n        <ng-template #withErrorBlock>\n          <p>{{ _text._default }}</p>\n          <div class=\"ngx-img-error\" *ngIf=\"hasError\">\n            <ul>\n              <li *ngFor=\"let error of errors\">{{ error }}</li>\n            </ul>\n          </div>\n          <button style=\"margin-top: 0\" class=\"ngx-img-button\">{{ _text.try_again }}</button>\n        </ng-template>\n      </div>\n      <div class=\"ngx-img-loader\" *ngIf=\"isLoading\"></div>\n      <input type=\"file\" [accept]=\"_config.fileType.join(', ')\" #fileInput (change)=\"fileChangeListener($event)\">\n      <button *ngIf=\"remove && hasPreview\" type=\"button\" class=\"ngx-img-clear\" (click)=\"reset()\">{{ _text.reset }}\n      </button>\n      <div class=\"ngx-img-preview\" *ngIf=\"hasPreview\">\n        <span class=\"ngx-img-render\"><img [src]=\"imgSrc\" [alt]=\"alt\"></span>\n        <div class=\"ngx-img-infos\">\n          <div class=\"ngx-img-infos-inner\">\n            <p class=\"ngx-img-filename\">{{fileName}}</p>\n            <p class=\"ngx-img-infos-message\">{{ _text.replace }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template [ngSwitchCase]=\"'crop'\">\n    <ngx-img-crop [config]=\"config\" [imgSrc]=\"imgSrc\" (onCrop)=\"onSelectEvent($event)\"\n                  (onReset)=\"reset()\"></ngx-img-crop>\n  </ng-template>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-img-wrapper{display:block;position:relative;cursor:pointer;overflow:hidden;width:100%;max-width:100%;height:400px;padding:5px 10px;font-family:Helvetica,Arial,sans-serif;font-size:14px;font-weight:300;line-height:22px;color:#333;background-color:#fff;background-image:none;text-align:center;border:2px solid #e5e5e5;transition:border-color .15s linear}.ngx-img-wrapper:hover{background-size:30px 30px;background-image:linear-gradient(-45deg,#f6f6f6 25%,transparent 25%,transparent 50%,#f6f6f6 50%,#f6f6f6 75%,transparent 75%,transparent);-webkit-animation:2s linear infinite stripes;animation:2s linear infinite stripes}.ngx-img-wrapper.has-preview .ngx-img-clear{display:block}.ngx-img-wrapper.has-error{border-color:#f44336}.ngx-img-wrapper.has-error .ngx-img-message .ngx-img-error{display:block}.ngx-img-wrapper.has-error:hover .ngx-img-errors-container{visibility:visible;opacity:1;transition-delay:0s}.ngx-img-wrapper.disabled input{cursor:not-allowed}.ngx-img-wrapper.disabled:hover{background-image:none;-webkit-animation:none;animation:none}.ngx-img-wrapper.disabled .ngx-img-message{opacity:.5;text-decoration:line-through}.ngx-img-wrapper.disabled .ngx-img-infos-message{display:none}.ngx-img-wrapper input{position:absolute;top:0;right:0;bottom:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer;z-index:5}.ngx-img-wrapper .ngx-img-button{font-size:.7rem;padding:.6rem 1rem;background:#17a2c4;box-shadow:none;border-radius:10em;border:0;color:#fff;margin-top:1rem;text-transform:uppercase;display:inline-block;font-weight:400;line-height:1.25;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-img-wrapper .ngx-img-message{position:relative;top:50%;transform:translateY(-50%)}.ngx-img-wrapper .ngx-img-message svg.ngx-img-upload .st-1,.ngx-img-wrapper .ngx-img-message svg.ngx-img-upload .st-2{fill:#17a2c4}.ngx-img-wrapper .ngx-img-message div,.ngx-img-wrapper .ngx-img-message p{margin:5px 0 0}.ngx-img-wrapper .ngx-img-message div.ngx-img-error,.ngx-img-wrapper .ngx-img-message p.ngx-img-error{color:#f44336;font-weight:700;display:none}.ngx-img-wrapper .ngx-img-message div li,.ngx-img-wrapper .ngx-img-message div ul,.ngx-img-wrapper .ngx-img-message p li,.ngx-img-wrapper .ngx-img-message p ul{list-style:none;padding:0}.ngx-img-wrapper .ngx-img-clear{display:block;position:absolute;opacity:0;z-index:7;top:10px;right:10px;background:0 0;border:2px solid #fff;text-transform:uppercase;font-family:Helvetica,Arial;font-size:11px;padding:4px 8px;font-weight:700;color:#fff;transition:.15s linear}.ngx-img-wrapper .ngx-img-clear:hover{background:rgba(255,255,255,.2)}.ngx-img-wrapper .ngx-img-preview{display:block;position:absolute;z-index:1;background-color:#fff;padding:5px;width:100%;height:100%;top:0;right:0;bottom:0;left:0;overflow:hidden;text-align:center}.ngx-img-wrapper .ngx-img-preview .ngx-img-render img{top:50%;transform:translate(0,-50%);position:relative;max-width:100%;max-height:100%;background-color:#fff;transition:border-color .15s linear}.ngx-img-wrapper .ngx-img-preview .ngx-img-render i{font-size:70px;top:50%;left:50%;transform:translate(-50%,-50%);position:absolute;color:#777}.ngx-img-wrapper .ngx-img-preview .ngx-img-render .ngx-img-extension{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);margin-top:10px;text-transform:uppercase;font-weight:900;letter-spacing:-.03em;font-size:13px;width:42px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos{position:absolute;left:0;top:0;right:0;bottom:0;z-index:3;background:rgba(0,0,0,.7);opacity:0;transition:opacity .15s linear}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{position:absolute;top:50%;transform:translate(0,-40%);-webkit-backface-visibility:hidden;backface-visibility:hidden;width:100%;padding:0 20px;transition:.2s}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p{padding:0;margin:0;position:relative;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#fff;text-align:center;line-height:25px;font-weight:700}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-infos-message{margin-top:15px;padding-top:15px;font-size:12px;position:relative;opacity:.5}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-infos-message::before{content:\"\";position:absolute;top:0;left:50%;transform:translate(-50%,0);background:#fff;width:30px;height:2px}.ngx-img-wrapper:hover .ngx-img-clear,.ngx-img-wrapper:hover .ngx-img-preview .ngx-img-infos{opacity:1}.ngx-img-wrapper:hover .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{margin-top:-5px}.ngx-img-wrapper.touch-fallback{height:auto!important}.ngx-img-wrapper.touch-fallback:hover{background-image:none;-webkit-animation:none;animation:none}.ngx-img-wrapper.touch-fallback .ngx-img-preview{position:relative;padding:0;display:block}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-render{display:block;position:relative}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-render img{position:relative;transform:translate(0,0)}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos{position:relative;opacity:1;background:0 0}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{position:relative;top:0;transform:translate(0,0);padding:5px 90px 5px 0}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p{padding:0;margin:0;position:relative;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#777;text-align:left;line-height:25px}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-filename{font-weight:700}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-infos-message{margin-top:0;padding-top:0;font-size:11px;position:relative;opacity:1}.ngx-img-wrapper.touch-fallback .ngx-img-message{transform:translate(0,0);padding:40px 0}.ngx-img-wrapper.touch-fallback .ngx-img-clear{top:auto;bottom:23px;opacity:1;border-color:rgba(119,119,119,.7);color:#777}.ngx-img-wrapper.touch-fallback.has-preview .ngx-img-message{display:none}.ngx-img-wrapper.touch-fallback:hover .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{margin-top:0}.ngx-img-wrapper .ngx-img-loader{position:absolute;top:15px;right:15px;display:block;z-index:9}.ngx-img-wrapper .ngx-img-loader::after{display:block;position:relative;width:20px;height:20px;-webkit-animation:.6s linear infinite rotate;animation:.6s linear infinite rotate;border-radius:100%;border-top:1px solid #ccc;border-bottom:1px solid #777;border-left:1px solid #ccc;border-right:1px solid #777;content:\"\"}.ngx-img-wrapper .ngx-img-errors-container{position:absolute;left:0;top:0;right:0;bottom:0;z-index:3;background:rgba(244,67,54,.8);text-align:left;visibility:hidden;opacity:0;transition:visibility linear .15s,opacity .15s linear}.ngx-img-wrapper .ngx-img-errors-container ul{padding:10px 20px;margin:0;position:absolute;left:0;top:50%;transform:translateY(-50%)}.ngx-img-wrapper .ngx-img-errors-container ul li{margin-left:20px;color:#fff;font-weight:700}.ngx-img-wrapper .ngx-img-errors-container.visible{visibility:visible;opacity:1;transition-delay:0s}.ngx-img-wrapper~.ngx-img-errors-container ul{padding:0;margin:15px 0}.ngx-img-wrapper~.ngx-img-errors-container ul li{margin-left:20px;color:#f44336;font-weight:700}@-webkit-keyframes stripes{from{background-position:0 0}to{background-position:60px 30px}}@keyframes stripes{from{background-position:0 0}to{background-position:60px 30px}}@-webkit-keyframes rotate{0%{transform:rotateZ(-360deg)}100%{transform:rotateZ(0)}}@keyframes rotate{0%{transform:rotateZ(-360deg)}100%{transform:rotateZ(0)}}"]
    })
], NgxImgComponent);
export { NgxImgComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW1nLyIsInNvdXJjZXMiOlsibW9kdWxlL2NvbXBvbmVudC9uZ3gtaW1nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQUUsU0FBUyxFQUNoQixTQUFTLEVBQ1QsTUFBTSxFQUNOLE1BQU0sRUFBRSxhQUFhLEVBQ3JCLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFRekQsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQW1HMUIsWUFBb0IsUUFBdUIsRUFBVSxJQUF1QjtRQUF4RCxhQUFRLEdBQVIsUUFBUSxDQUFlO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFsR25FLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2QsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNaLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFnQ3ZCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDbkIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLFlBQU8sR0FVSDtZQUNGLFFBQVEsRUFBRSxJQUFJO1lBQ2QsUUFBUSxFQUFFLENBQUM7WUFDWCxRQUFRLEVBQUUsQ0FBQztZQUNYLFNBQVMsRUFBRSxDQUFDO1lBQ1osU0FBUyxFQUFFLENBQUM7WUFDWixRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDM0MsT0FBTyxFQUFFLEdBQUc7U0FDYixDQUFDO1FBQ0YsVUFBSyxHQVFEO1lBQ0YsT0FBTyxFQUFFLGVBQWU7WUFDeEIsUUFBUSxFQUFFLHdCQUF3QjtZ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UUFFdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7R0FDVyxlQUFlLENBcVAzQjtTQXJQWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ3hJbWdTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL25neC1pbWcuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1pbWcnLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LWltZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL25neC1pbWcuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTmd4SW1nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGFsdCA9ICcnO1xuICBASW5wdXQoKSBmaWxlTmFtZSA9ICcnO1xuICBASW5wdXQoKSBpbWdTcmMgPSAnJztcbiAgQElucHV0KCkgcmVtb3ZlID0gdHJ1ZTtcbiAgQFZpZXdDaGlsZCgnZmlsZUlucHV0JykgZmlsZUlucHV0OiBhbnk7XG4gIEBJbnB1dCgpIGNvbmZpZzoge1xuICAgIGZpbGVTaXplPzogbnVtYmVyLFxuICAgIG1pbldpZHRoPzogbnVtYmVyLFxuICAgIG1heFdpZHRoPzogbnVtYmVyLFxuICAgIG1pbkhlaWdodD86IG51bWJlcixcbiAgICBtYXhIZWlnaHQ/OiBudW1iZXIsXG4gICAgZmlsZVR5cGU/OiBzdHJpbmdbXSxcbiAgICBoZWlnaHQ/OiBudW1iZXIsXG4gICAgcXVhbGl0eT86IG51bWJlcixcbiAgICBjcm9wPzogYW55XG4gIH07XG4gIEBJbnB1dCgpIGVycm9yVGV4dHM6IHtcbiAgICBmaWxlU2l6ZT86IHN0cmluZyxcbiAgICBtaW5XaWR0aD86IHN0cmluZyxcbiAgICBtYXhXaWR0aD86IHN0cmluZyxcbiAgICBtaW5IZWlnaHQ/OiBzdHJpbmcsXG4gICAgbWF4SGVpZ2h0Pzogc3RyaW5nLFxuICAgIGltYWdlRm9ybWF0Pzogc3RyaW5nLFxuICAgIGZpbGVUeXBlPzogc3RyaW5nXG4gIH07XG4gIEBJbnB1dCgpIHRleHQ6IHtcbiAgICBkZWZhdWx0Pzogc3RyaW5nLFxuICAgIF9kZWZhdWx0Pzogc3RyaW5nLFxuICAgIGJ1dHRvbj86IHN0cmluZyxcbiAgICB0cnlfYWdhaW4/OiBzdHJpbmcsXG4gICAgcmVwbGFjZT86IHN0cmluZyxcbiAgICByZXNldD86IHN0cmluZyxcbiAgICBlcnJvcj86IHN0cmluZ1xuICB9O1xuXG4gIGhhc1ByZXZpZXcgPSBmYWxzZTtcbiAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgaXNMb2FkaW5nID0gZmFsc2U7XG4gIF9jb25maWc6IHtcbiAgICBmaWxlU2l6ZT86IG51bWJlcixcbiAgICBtaW5XaWR0aD86IG51bWJlcixcbiAgICBtYXhXaWR0aD86IG51bWJlcixcbiAgICBtaW5IZWlnaHQ/OiBudW1iZXIsXG4gICAgbWF4SGVpZ2h0PzogbnVtYmVyLFxuICAgIGZpbGVUeXBlPzogc3RyaW5nW10sXG4gICAgaGVpZ2h0PzogbnVtYmVyLFxuICAgIHF1YWxpdHk/OiBudW1iZXIsXG4gICAgY3JvcD86IGFueVxuICB9ID0ge1xuICAgIGZpbGVTaXplOiAyMDQ4LFxuICAgIG1pbldpZHRoOiAwLFxuICAgIG1heFdpZHRoOiAwLFxuICAgIG1pbkhlaWdodDogMCxcbiAgICBtYXhIZWlnaHQ6IDAsXG4gICAgZmlsZVR5cGU6IFsnLmdpZicsICcuanBlZycsICcucG5nJywgJy5qcGcnXSxcbiAgICBxdWFsaXR5OiAwLjhcbiAgfTtcbiAgX3RleHQ6IHtcbiAgICBkZWZhdWx0Pzogc3RyaW5nLFxuICAgIF9kZWZhdWx0Pzogc3RyaW5nLFxuICAgIGJ1dHRvbj86IHN0cmluZyxcbiAgICB0cnlfYWdhaW4/OiBzdHJpbmcsXG4gICAgcmVwbGFjZT86IHN0cmluZyxcbiAgICByZXNldD86IHN0cmluZyxcbiAgICBlcnJvcj86IHN0cmluZ1xuICB9ID0ge1xuICAgIGRlZmF1bHQ6ICdEcmFnIGFuZCBkcm9wJyxcbiAgICBfZGVmYXVsdDogJ0RyYWcgYW5kIGRyb3Agb3IgY2xpY2snLFxuICAgIGJ1dHRvbjogJ0Nob29zZSBGaWxlJyxcbiAgICB0cnlfYWdhaW46ICdUcnkgQWdhaW4nLFxuICAgIHJlcGxhY2U6ICdEcmFnIGFuZCBkcm9wIG9yIGNsaWNrIHRvIHJlcGxhY2UnLFxuICAgIHJlc2V0OiAnUmVtb3ZlJyxcbiAgICBlcnJvcjogJ09vcHMsIHNvbWV0aGluZyB3cm9uZyBoYXBwZW5lZC4nXG4gIH07XG4gIF9lcnJvclRleHRzOiB7XG4gICAgZmlsZVNpemU/OiBzdHJpbmcsXG4gICAgbWluV2lkdGg/OiBzdHJpbmcsXG4gICAgbWF4V2lkdGg/OiBzdHJpbmcsXG4gICAgbWluSGVpZ2h0Pzogc3RyaW5nLFxuICAgIG1heEhlaWdodD86IHN0cmluZyxcbiAgICBpbWFnZUZvcm1hdD86IHN0cmluZyxcbiAgICBmaWxlVHlwZT86IHN0cmluZ1xuICB9ID0ge1xuICAgIGZpbGVTaXplOiAnVGhlIGZpbGUgc2l6ZSBpcyB0b28gYmlnICh7eyB2YWx1ZSB9fSBtYXgpLicsXG4gICAgbWluV2lkdGg6ICdUaGUgaW1hZ2Ugd2lkdGggaXMgdG9vIHNtYWxsICh7eyB2YWx1ZSB9fX1weCBtaW4pLicsXG4gICAgbWF4V2lkdGg6ICdUaGUgaW1hZ2Ugd2lkdGggaXMgdG9vIGJpZyAoe3sgdmFsdWUgfX19cHggbWF4KS4nLFxuICAgIG1pbkhlaWdodDogJ1RoZSBpbWFnZSBoZWlnaHQgaXMgdG9vIHNtYWxsICh7eyB2YWx1ZSB9fX1weCBtaW4pLicsXG4gICAgbWF4SGVpZ2h0OiAnVGhlIGltYWdlIGhlaWdodCBpcyB0b28gYmlnICh7eyB2YWx1ZSB9fX1weCBtYXgpLicsXG4gICAgaW1hZ2VGb3JtYXQ6ICdUaGUgaW1hZ2UgZm9ybWF0IGlzIG5vdCBhbGxvd2VkICh7eyB2YWx1ZSB9fSBvbmx5KS4nLFxuICAgIGZpbGVUeXBlOiAnVGhlIGZpbGUgdHlwZSBpcyBub3QgYWxsb3dlZC4nXG4gIH07XG4gIGVycm9yczogYW55ID0gW107XG4gIGZpbGU6IGFueTtcbiAgbW9kZSA9ICd1cGxvYWQnO1xuICBAT3V0cHV0KCkgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25SZXNldDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2VydmljZTogTmd4SW1nU2VydmljZSwgcHJpdmF0ZSBfcmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX3RleHQgPSBPYmplY3QuYXNzaWduKHRoaXMuX3RleHQsIHRoaXMudGV4dCk7XG4gICAgdGhpcy5fZXJyb3JUZXh0cyA9IE9iamVjdC5hc3NpZ24odGhpcy5fZXJyb3JUZXh0cywgdGhpcy5lcnJvclRleHRzKTtcbiAgICB0aGlzLl9jb25maWcgPSBPYmplY3QuYXNzaWduKHRoaXMuX2NvbmZpZywgdGhpcy5jb25maWcpO1xuICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaW1nU3JjICYmIGNoYW5nZXMuaW1nU3JjLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgaWYgKHRoaXMuaW1nU3JjKSB7XG4gICAgICAgIHRoaXMuaGFzUHJldmlldyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5jcm9wKSB7XG4gICAgICAgICAgdGhpcy5tb2RlID0gJ2Nyb3AnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmlsZUNoYW5nZUxpc3RlbmVyKGU6IGFueSkge1xuICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgIGlmICghZS50YXJnZXQuZmlsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlKCkpIHtcbiAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmZpbGUubmFtZTtcbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQodGhpcy5maWxlKTtcblxuICAgIGlmICh0aGlzLmZpbGUudHlwZS5zcGxpdCgnLycpWzBdID09PSAnaW1hZ2UnKSB7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICBjb25zdCByZWFkZXI6IEZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9IChldjogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuaW1nU3JjID0gZXYudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgdGhpcy5maWxlTmFtZSA9IHRoaXMuZmlsZS5uYW1lO1xuICAgICAgICB0aGlzLmhhc1ByZXZpZXcgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmNyb3ApIHtcbiAgICAgICAgICB0aGlzLm1vZGUgPSAnY3JvcCc7XG4gICAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zZXJ2aWNlLmNvbXByZXNzKHRoaXMuaW1nU3JjLCB0aGlzLl9jb25maWcpLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uU2VsZWN0RXZlbnQocmVzKTtcbiAgICAgICAgICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMub25TZWxlY3RFdmVudCh0aGlzLmltZ1NyYyk7XG4gICAgICAgICAgICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKHRoaXMuZmlsZSk7XG4gICAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5tb2RlID0gJ3VwbG9hZCc7XG4gICAgdGhpcy5maWxlID0gbnVsbDtcbiAgICB0aGlzLmltZ1NyYyA9ICcnO1xuICAgIHRoaXMuZmlsZU5hbWUgPSAnJztcbiAgICB0aGlzLmhhc1ByZXZpZXcgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5maWxlSW5wdXQpIHtcbiAgICAgIHRoaXMuZmlsZUlucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gICAgdGhpcy5vblJlc2V0LmVtaXQoKTtcbiAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICBpZiAodGhpcy5fY29uZmlnLmZpbGVUeXBlLmxlbmd0aCAhPT0gMCAmJlxuICAgICAgdGhpcy5fY29uZmlnLmZpbGVUeXBlLmluZGV4T2YodGhpcy5maWxlLnR5cGUpID09PSAtMSAmJiB0aGlzLl9jb25maWcuZmlsZVR5cGUuaW5kZXhPZihgLiR7dGhpcy5maWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKX1gKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuZXJyb3JzID0gWy4uLnRoaXMuZXJyb3JzLCB0aGlzLl9lcnJvclRleHRzLmZpbGVUeXBlXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmZpbGVTaXplICE9PSAwICYmICh0aGlzLmZpbGUuc2l6ZSAvIDEwMjQpID4gdGhpcy5fY29uZmlnLmZpbGVTaXplKSB7XG4gICAgICB0aGlzLmVycm9ycyA9IFsuLi50aGlzLmVycm9ycywgdGhpcy5fZXJyb3JUZXh0cy5maWxlU2l6ZS5yZXBsYWNlKCd7eyB2YWx1ZSB9fScsIHRoaXMuc2l6ZVRvQnl0ZSh0aGlzLl9jb25maWcuZmlsZVNpemUpKV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5taW5XaWR0aCAhPT0gMCAmJiB0aGlzLl9jb25maWcubWluV2lkdGggPj0gdGhpcy5maWxlLndpZHRoKSB7XG4gICAgICB0aGlzLmVycm9ycyA9IFsuLi50aGlzLmVycm9ycywgdGhpcy5fZXJyb3JUZXh0cy5taW5XaWR0aC5yZXBsYWNlKCd7eyB2YWx1ZSB9fScsIHRoaXMuX2NvbmZpZy5taW5XaWR0aC50b1N0cmluZygpKV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5tYXhXaWR0aCAhPT0gMCAmJiB0aGlzLl9jb25maWcubWF4V2lkdGggPD0gdGhpcy5maWxlLndpZHRoKSB7XG4gICAgICB0aGlzLmVycm9ycyA9IFsuLi50aGlzLmVycm9ycywgdGhpcy5fZXJyb3JUZXh0cy5tYXhXaWR0aC5yZXBsYWNlKCd7eyB2YWx1ZSB9fScsIHRoaXMuX2NvbmZpZy5tYXhXaWR0aC50b1N0cmluZygpKV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5taW5IZWlnaHQgIT09IDAgJiYgdGhpcy5fY29uZmlnLm1pbkhlaWdodCA+PSB0aGlzLmZpbGUuaGVpZ2h0KSB7XG4gICAgICB0aGlzLmVycm9ycyA9IFsuLi50aGlzLmVycm9ycywgdGhpcy5fZXJyb3JUZXh0cy5taW5IZWlnaHQucmVwbGFjZSgne3sgdmFsdWUgfX0nLCB0aGlzLl9jb25maWcubWluSGVpZ2h0LnRvU3RyaW5nKCkpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLm1heEhlaWdodCAhPT0gMCAmJiB0aGlzLl9jb25maWcubWF4SGVpZ2h0IDw9IHRoaXMuZmlsZS5oZWlnaHQpIHtcbiAgICAgIHRoaXMuZXJyb3JzID0gWy4uLnRoaXMuZXJyb3JzLCB0aGlzLl9lcnJvclRleHRzLm1heEhlaWdodC5yZXBsYWNlKCd7eyB2YWx1ZSB9fScsIHRoaXMuX2NvbmZpZy5tYXhIZWlnaHQudG9TdHJpbmcoKSldO1xuICAgIH1cblxuICAgIHJldHVybiAhdGhpcy5lcnJvcnMubGVuZ3RoO1xuICB9XG5cbiAgc2l6ZVRvQnl0ZShzaXplOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVuaXRzID0gWydLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoc2l6ZSA+PSAxMDI0KSB7XG4gICAgICBzaXplIC89IDEwMjQ7XG4gICAgICArK2k7XG4gICAgfVxuICAgIHJldHVybiBzaXplLnRvRml4ZWQoMSkgKyAnICcgKyB1bml0c1tpXTtcbiAgfTtcblxuICBvblNlbGVjdEV2ZW50KGRhdGE6IGFueSkge1xuICAgIHRoaXMub25TZWxlY3QuZW1pdChkYXRhKTtcbiAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcHVibGljIG1hcmtGb3JDaGVjaygpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fcmVmWydkZXN0cm95ZWQnXSkge1xuICAgICAgICB0aGlzLl9yZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIHRoaXMuX3JlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX3JlZlsnZGVzdHJveWVkJ10pIHtcbiAgICAgICAgdGhpcy5fcmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB0aGlzLl9yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfVxuICAgIH0sIDMwMCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5fcmVmLmRldGFjaCgpO1xuICB9XG59XG4iXX0=