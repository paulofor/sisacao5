import { __decorate, __spread } from 'tslib';
import { CommonModule } from '@angular/common';
import { Injectable, EventEmitter, ChangeDetectorRef, Input, ViewChild, Output, Component, ChangeDetectionStrategy, ElementRef, ViewEncapsulation, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import Cropper from 'cropperjs';

var getMimeType = function (src) { return src ? src.substring('data:'.length, src.indexOf(';base64')) : ''; };

var NgxImgService = /** @class */ (function () {
    function NgxImgService() {
    }
    NgxImgService.prototype.compress = function (src, config) {
        var mimeType = getMimeType(src);
        return new Promise(function (resolve, reject) {
            var img = new Image();
            img.src = src;
            img.onerror = function () {
                reject();
            };
            img.onload = function () {
                var cvs = document.createElement('canvas');
                var ctx = cvs.getContext('2d');
                var aspectRatio = img.naturalWidth / img.naturalHeight;
                var maxWidth = config.maxWidth ? config.maxWidth : Infinity;
                var maxHeight = config.maxHeight ? config.maxHeight : Infinity;
                var minWidth = config.minWidth ? config.minWidth : 0;
                var minHeight = config.minHeight ? config.minHeight : 0;
                var width = img.naturalWidth;
                var height = img.naturalHeight;
                if (maxWidth < Infinity && maxHeight < Infinity) {
                    if (maxHeight * aspectRatio > maxWidth) {
                        maxHeight = maxWidth / aspectRatio;
                    }
                    else {
                        maxWidth = maxHeight * aspectRatio;
                    }
                }
                else if (maxWidth < Infinity) {
                    maxHeight = maxWidth / aspectRatio;
                }
                else if (maxHeight < Infinity) {
                    maxWidth = maxHeight * aspectRatio;
                }
                if (minWidth > 0 && minHeight > 0) {
                    if (minHeight * aspectRatio > minWidth) {
                        minHeight = minWidth / aspectRatio;
                    }
                    else {
                        minWidth = minHeight * aspectRatio;
                    }
                }
                else if (minWidth > 0) {
                    minHeight = minWidth / aspectRatio;
                }
                else if (minHeight > 0) {
                    minWidth = minHeight * aspectRatio;
                }
                width = Math.min(Math.max(width, minWidth), maxWidth);
                height = Math.min(Math.max(height, minHeight), maxHeight);
                var destX = -width / 2;
                var destY = -height / 2;
                var destWidth = width;
                var destHeight = height;
                cvs.width = width;
                cvs.height = height;
                ctx.translate(width / 2, height / 2);
                ctx.scale(1, 1);
                ctx.drawImage(img, Math.floor(destX), Math.floor(destY), Math.floor(destWidth), Math.floor(destHeight));
                ctx.restore();
                resolve(cvs.toDataURL(mimeType, config.quality));
            };
        });
    };
    NgxImgService = __decorate([
        Injectable()
    ], NgxImgService);
    return NgxImgService;
}());

var NgxImgComponent = /** @class */ (function () {
    function NgxImgComponent(_service, _ref) {
        this._service = _service;
        this._ref = _ref;
        this.alt = '';
        this.fileName = '';
        this.imgSrc = '';
        this.remove = true;
        this.hasPreview = false;
        this.hasError = false;
        this.isLoading = false;
        this._config = {
            fileSize: 2048,
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0,
            fileType: ['.gif', '.jpeg', '.png', '.jpg'],
            quality: 0.8
        };
        this._text = {
            default: 'Drag and drop',
            _default: 'Drag and drop or click',
            button: 'Choose File',
            try_again: 'Try Again',
            replace: 'Drag and drop or click to replace',
            reset: 'Remove',
            error: 'Oops, something wrong happened.'
        };
        this._errorTexts = {
            fileSize: 'The file size is too big ({{ value }} max).',
            minWidth: 'The image width is too small ({{ value }}}px min).',
            maxWidth: 'The image width is too big ({{ value }}}px max).',
            minHeight: 'The image height is too small ({{ value }}}px min).',
            maxHeight: 'The image height is too big ({{ value }}}px max).',
            imageFormat: 'The image format is not allowed ({{ value }} only).',
            fileType: 'The file type is not allowed.'
        };
        this.errors = [];
        this.mode = 'upload';
        this.onChange = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onReset = new EventEmitter();
        this.reset();
    }
    NgxImgComponent.prototype.ngOnInit = function () {
        this._text = Object.assign(this._text, this.text);
        this._errorTexts = Object.assign(this._errorTexts, this.errorTexts);
        this._config = Object.assign(this._config, this.config);
        this.markForCheck();
    };
    NgxImgComponent.prototype.ngOnChanges = function (changes) {
        if (changes.imgSrc && changes.imgSrc.isFirstChange()) {
            if (this.imgSrc) {
                this.hasPreview = true;
                if (this.config && this.config.crop) {
                    this.mode = 'crop';
                }
                this.markForCheck();
            }
        }
    };
    NgxImgComponent.prototype.fileChangeListener = function (e) {
        var _this = this;
        this.hasError = false;
        this.errors = [];
        if (!e.target.files.length) {
            this.reset();
            return false;
        }
        this.file = e.target.files[0];
        if (!this.validate()) {
            this.hasError = true;
            this.reset();
            return false;
        }
        this.fileName = this.file.name;
        this.onChange.emit(this.file);
        if (this.file.type.split('/')[0] === 'image') {
            this.isLoading = true;
            var reader = new FileReader();
            reader.onloadend = function (ev) {
                _this.imgSrc = ev.target.result;
                _this.fileName = _this.file.name;
                _this.hasPreview = true;
                _this.isLoading = false;
                if (_this._config.crop) {
                    _this.mode = 'crop';
                    _this.markForCheck();
                }
                else {
                    _this._service.compress(_this.imgSrc, _this._config).then(function (res) {
                        _this.onSelectEvent(res);
                        _this.markForCheck();
                    })
                        .catch(function () {
                        _this.onSelectEvent(_this.imgSrc);
                        _this.markForCheck();
                    });
                }
            };
            reader.readAsDataURL(this.file);
            this.markForCheck();
        }
        this.markForCheck();
    };
    NgxImgComponent.prototype.reset = function () {
        this.mode = 'upload';
        this.file = null;
        this.imgSrc = '';
        this.fileName = '';
        this.hasPreview = false;
        if (this.fileInput) {
            this.fileInput.nativeElement.value = '';
        }
        this.onReset.emit();
        this.markForCheck();
    };
    NgxImgComponent.prototype.validate = function () {
        this.errors = [];
        if (this._config.fileType.length !== 0 &&
            this._config.fileType.indexOf(this.file.type) === -1 && this._config.fileType.indexOf("." + this.file.name.split('.').pop()) === -1) {
            this.errors = __spread(this.errors, [this._errorTexts.fileType]);
        }
        if (this._config.fileSize !== 0 && (this.file.size / 1024) > this._config.fileSize) {
            this.errors = __spread(this.errors, [this._errorTexts.fileSize.replace('{{ value }}', this.sizeToByte(this._config.fileSize))]);
        }
        if (this._config.minWidth !== 0 && this._config.minWidth >= this.file.width) {
            this.errors = __spread(this.errors, [this._errorTexts.minWidth.replace('{{ value }}', this._config.minWidth.toString())]);
        }
        if (this._config.maxWidth !== 0 && this._config.maxWidth <= this.file.width) {
            this.errors = __spread(this.errors, [this._errorTexts.maxWidth.replace('{{ value }}', this._config.maxWidth.toString())]);
        }
        if (this._config.minHeight !== 0 && this._config.minHeight >= this.file.height) {
            this.errors = __spread(this.errors, [this._errorTexts.minHeight.replace('{{ value }}', this._config.minHeight.toString())]);
        }
        if (this._config.maxHeight !== 0 && this._config.maxHeight <= this.file.height) {
            this.errors = __spread(this.errors, [this._errorTexts.maxHeight.replace('{{ value }}', this._config.maxHeight.toString())]);
        }
        return !this.errors.length;
    };
    NgxImgComponent.prototype.sizeToByte = function (size) {
        var units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        var i = 0;
        while (size >= 1024) {
            size /= 1024;
            ++i;
        }
        return size.toFixed(1) + ' ' + units[i];
    };
    ;
    NgxImgComponent.prototype.onSelectEvent = function (data) {
        this.onSelect.emit(data);
        this.markForCheck();
    };
    NgxImgComponent.prototype.markForCheck = function () {
        var _this = this;
        setTimeout(function () {
            if (!_this._ref['destroyed']) {
                _this._ref.markForCheck();
                _this._ref.detectChanges();
            }
        });
        setTimeout(function () {
            if (!_this._ref['destroyed']) {
                _this._ref.markForCheck();
                _this._ref.detectChanges();
            }
        }, 300);
    };
    NgxImgComponent.prototype.ngOnDestroy = function () {
        this.reset();
        this._ref.detach();
    };
    NgxImgComponent.ctorParameters = function () { return [
        { type: NgxImgService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "alt", void 0);
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "fileName", void 0);
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "imgSrc", void 0);
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "remove", void 0);
    __decorate([
        ViewChild('fileInput')
    ], NgxImgComponent.prototype, "fileInput", void 0);
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "errorTexts", void 0);
    __decorate([
        Input()
    ], NgxImgComponent.prototype, "text", void 0);
    __decorate([
        Output()
    ], NgxImgComponent.prototype, "onChange", void 0);
    __decorate([
        Output()
    ], NgxImgComponent.prototype, "onSelect", void 0);
    __decorate([
        Output()
    ], NgxImgComponent.prototype, "onReset", void 0);
    NgxImgComponent = __decorate([
        Component({
            selector: 'ngx-img',
            template: "<ng-container [ngSwitch]=\"mode\">\n  <ng-template [ngSwitchCase]=\"'upload'\">\n    <div class=\"ngx-img-wrapper\" [class.has-preview]=\"hasPreview\" [class.has-error]=\"hasError\"\n         [style.height]=\"_config.height\">\n      <div class=\"ngx-img-message\" *ngIf=\"!hasPreview\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox=\"0 0 640 640\" class=\"ngx-img-upload\">\n          <path class=\"st-1\"\n                d=\"M411.312 372.688l-64-64c-6.247-6.248-16.379-6.248-22.627 0l-64 64c-6.248 6.247-6.248 16.379 0 22.627s16.379 6.248 22.628 0l36.687-36.687v137.372c0 8.837 7.163 16 16 16s16-7.163 16-16v-137.372l36.688 36.687c3.123 3.123 7.217 4.685 11.312 4.685s8.189-1.562 11.312-4.688c6.25-6.247 6.25-16.377 0-22.624z\"></path>\n          <path class=\"st-2\"\n                d=\"M512.2 512h-112.2c-8.837 0-16-7.163-16-16s7.163-16 16-16h112.2c52.824 0 95.8-42.976 95.8-95.8s-42.976-95.8-95.8-95.8c-11.33 0-22.371 1.938-32.817 5.764-6.979 2.555-14.798-0.031-18.876-6.243s-3.343-14.415 1.776-19.803c11.425-12.022 17.717-27.692 17.717-44.118 0-35.29-28.71-64-64-64-20.536 0-39.32 9.492-51.535 26.042-7.374 9.991-11.668 21.692-12.417 33.836-0.419 6.781-5.073 12.558-11.609 14.409-6.539 1.854-13.53-0.629-17.441-6.182-3.52-4.998-7.331-9.814-11.329-14.314-30.367-34.185-73.984-53.791-119.669-53.791-88.224 0-160 71.775-160 160s71.776 160 160 160h80c8.836 0 16 7.163 16 16s-7.164 16-16 16h-80c-105.869 0-192-86.131-192-192s86.131-192 192-192c51.271 0 100.368 20.573 136.315 56.791 2.802-6.217 6.28-12.168 10.402-17.752 18.044-24.445 46.933-39.039 77.283-39.039 52.935 0 96 43.065 96 96 0 11.223-1.949 22.202-5.685 32.532 1.954-0.089 3.917-0.132 5.885-0.132 70.469 0 127.8 57.331 127.8 127.8s-57.331 127.8-127.8 127.8z\"></path>\n        </svg>\n        <ng-template [ngIf]=\"!hasError\" [ngIfElse]=\"withErrorBlock\">\n          <p>{{ _text.default }}</p>\n          <button class=\"ngx-img-button\">{{ _text.button }}</button>\n        </ng-template>\n        <ng-template #withErrorBlock>\n          <p>{{ _text._default }}</p>\n          <div class=\"ngx-img-error\" *ngIf=\"hasError\">\n            <ul>\n              <li *ngFor=\"let error of errors\">{{ error }}</li>\n            </ul>\n          </div>\n          <button style=\"margin-top: 0\" class=\"ngx-img-button\">{{ _text.try_again }}</button>\n        </ng-template>\n      </div>\n      <div class=\"ngx-img-loader\" *ngIf=\"isLoading\"></div>\n      <input type=\"file\" [accept]=\"_config.fileType.join(', ')\" #fileInput (change)=\"fileChangeListener($event)\">\n      <button *ngIf=\"remove && hasPreview\" type=\"button\" class=\"ngx-img-clear\" (click)=\"reset()\">{{ _text.reset }}\n      </button>\n      <div class=\"ngx-img-preview\" *ngIf=\"hasPreview\">\n        <span class=\"ngx-img-render\"><img [src]=\"imgSrc\" [alt]=\"alt\"></span>\n        <div class=\"ngx-img-infos\">\n          <div class=\"ngx-img-infos-inner\">\n            <p class=\"ngx-img-filename\">{{fileName}}</p>\n            <p class=\"ngx-img-infos-message\">{{ _text.replace }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template [ngSwitchCase]=\"'crop'\">\n    <ngx-img-crop [config]=\"config\" [imgSrc]=\"imgSrc\" (onCrop)=\"onSelectEvent($event)\"\n                  (onReset)=\"reset()\"></ngx-img-crop>\n  </ng-template>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-img-wrapper{display:block;position:relative;cursor:pointer;overflow:hidden;width:100%;max-width:100%;height:400px;padding:5px 10px;font-family:Helvetica,Arial,sans-serif;font-size:14px;font-weight:300;line-height:22px;color:#333;background-color:#fff;background-image:none;text-align:center;border:2px solid #e5e5e5;transition:border-color .15s linear}.ngx-img-wrapper:hover{background-size:30px 30px;background-image:linear-gradient(-45deg,#f6f6f6 25%,transparent 25%,transparent 50%,#f6f6f6 50%,#f6f6f6 75%,transparent 75%,transparent);-webkit-animation:2s linear infinite stripes;animation:2s linear infinite stripes}.ngx-img-wrapper.has-preview .ngx-img-clear{display:block}.ngx-img-wrapper.has-error{border-color:#f44336}.ngx-img-wrapper.has-error .ngx-img-message .ngx-img-error{display:block}.ngx-img-wrapper.has-error:hover .ngx-img-errors-container{visibility:visible;opacity:1;transition-delay:0s}.ngx-img-wrapper.disabled input{cursor:not-allowed}.ngx-img-wrapper.disabled:hover{background-image:none;-webkit-animation:none;animation:none}.ngx-img-wrapper.disabled .ngx-img-message{opacity:.5;text-decoration:line-through}.ngx-img-wrapper.disabled .ngx-img-infos-message{display:none}.ngx-img-wrapper input{position:absolute;top:0;right:0;bottom:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer;z-index:5}.ngx-img-wrapper .ngx-img-button{font-size:.7rem;padding:.6rem 1rem;background:#17a2c4;box-shadow:none;border-radius:10em;border:0;color:#fff;margin-top:1rem;text-transform:uppercase;display:inline-block;font-weight:400;line-height:1.25;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-img-wrapper .ngx-img-message{position:relative;top:50%;transform:translateY(-50%)}.ngx-img-wrapper .ngx-img-message svg.ngx-img-upload .st-1,.ngx-img-wrapper .ngx-img-message svg.ngx-img-upload .st-2{fill:#17a2c4}.ngx-img-wrapper .ngx-img-message div,.ngx-img-wrapper .ngx-img-message p{margin:5px 0 0}.ngx-img-wrapper .ngx-img-message div.ngx-img-error,.ngx-img-wrapper .ngx-img-message p.ngx-img-error{color:#f44336;font-weight:700;display:none}.ngx-img-wrapper .ngx-img-message div li,.ngx-img-wrapper .ngx-img-message div ul,.ngx-img-wrapper .ngx-img-message p li,.ngx-img-wrapper .ngx-img-message p ul{list-style:none;padding:0}.ngx-img-wrapper .ngx-img-clear{display:block;position:absolute;opacity:0;z-index:7;top:10px;right:10px;background:0 0;border:2px solid #fff;text-transform:uppercase;font-family:Helvetica,Arial;font-size:11px;padding:4px 8px;font-weight:700;color:#fff;transition:.15s linear}.ngx-img-wrapper .ngx-img-clear:hover{background:rgba(255,255,255,.2)}.ngx-img-wrapper .ngx-img-preview{display:block;position:absolute;z-index:1;background-color:#fff;padding:5px;width:100%;height:100%;top:0;right:0;bottom:0;left:0;overflow:hidden;text-align:center}.ngx-img-wrapper .ngx-img-preview .ngx-img-render img{top:50%;transform:translate(0,-50%);position:relative;max-width:100%;max-height:100%;background-color:#fff;transition:border-color .15s linear}.ngx-img-wrapper .ngx-img-preview .ngx-img-render i{font-size:70px;top:50%;left:50%;transform:translate(-50%,-50%);position:absolute;color:#777}.ngx-img-wrapper .ngx-img-preview .ngx-img-render .ngx-img-extension{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);margin-top:10px;text-transform:uppercase;font-weight:900;letter-spacing:-.03em;font-size:13px;width:42px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos{position:absolute;left:0;top:0;right:0;bottom:0;z-index:3;background:rgba(0,0,0,.7);opacity:0;transition:opacity .15s linear}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{position:absolute;top:50%;transform:translate(0,-40%);-webkit-backface-visibility:hidden;backface-visibility:hidden;width:100%;padding:0 20px;transition:.2s}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p{padding:0;margin:0;position:relative;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#fff;text-align:center;line-height:25px;font-weight:700}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-infos-message{margin-top:15px;padding-top:15px;font-size:12px;position:relative;opacity:.5}.ngx-img-wrapper .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-infos-message::before{content:\"\";position:absolute;top:0;left:50%;transform:translate(-50%,0);background:#fff;width:30px;height:2px}.ngx-img-wrapper:hover .ngx-img-clear,.ngx-img-wrapper:hover .ngx-img-preview .ngx-img-infos{opacity:1}.ngx-img-wrapper:hover .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{margin-top:-5px}.ngx-img-wrapper.touch-fallback{height:auto!important}.ngx-img-wrapper.touch-fallback:hover{background-image:none;-webkit-animation:none;animation:none}.ngx-img-wrapper.touch-fallback .ngx-img-preview{position:relative;padding:0;display:block}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-render{display:block;position:relative}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-render img{position:relative;transform:translate(0,0)}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos{position:relative;opacity:1;background:0 0}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{position:relative;top:0;transform:translate(0,0);padding:5px 90px 5px 0}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p{padding:0;margin:0;position:relative;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#777;text-align:left;line-height:25px}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-filename{font-weight:700}.ngx-img-wrapper.touch-fallback .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner p.ngx-img-infos-message{margin-top:0;padding-top:0;font-size:11px;position:relative;opacity:1}.ngx-img-wrapper.touch-fallback .ngx-img-message{transform:translate(0,0);padding:40px 0}.ngx-img-wrapper.touch-fallback .ngx-img-clear{top:auto;bottom:23px;opacity:1;border-color:rgba(119,119,119,.7);color:#777}.ngx-img-wrapper.touch-fallback.has-preview .ngx-img-message{display:none}.ngx-img-wrapper.touch-fallback:hover .ngx-img-preview .ngx-img-infos .ngx-img-infos-inner{margin-top:0}.ngx-img-wrapper .ngx-img-loader{position:absolute;top:15px;right:15px;display:block;z-index:9}.ngx-img-wrapper .ngx-img-loader::after{display:block;position:relative;width:20px;height:20px;-webkit-animation:.6s linear infinite rotate;animation:.6s linear infinite rotate;border-radius:100%;border-top:1px solid #ccc;border-bottom:1px solid #777;border-left:1px solid #ccc;border-right:1px solid #777;content:\"\"}.ngx-img-wrapper .ngx-img-errors-container{position:absolute;left:0;top:0;right:0;bottom:0;z-index:3;background:rgba(244,67,54,.8);text-align:left;visibility:hidden;opacity:0;transition:visibility linear .15s,opacity .15s linear}.ngx-img-wrapper .ngx-img-errors-container ul{padding:10px 20px;margin:0;position:absolute;left:0;top:50%;transform:translateY(-50%)}.ngx-img-wrapper .ngx-img-errors-container ul li{margin-left:20px;color:#fff;font-weight:700}.ngx-img-wrapper .ngx-img-errors-container.visible{visibility:visible;opacity:1;transition-delay:0s}.ngx-img-wrapper~.ngx-img-errors-container ul{padding:0;margin:15px 0}.ngx-img-wrapper~.ngx-img-errors-container ul li{margin-left:20px;color:#f44336;font-weight:700}@-webkit-keyframes stripes{from{background-position:0 0}to{background-position:60px 30px}}@keyframes stripes{from{background-position:0 0}to{background-position:60px 30px}}@-webkit-keyframes rotate{0%{transform:rotateZ(-360deg)}100%{transform:rotateZ(0)}}@keyframes rotate{0%{transform:rotateZ(-360deg)}100%{transform:rotateZ(0)}}"]
        })
    ], NgxImgComponent);
    return NgxImgComponent;
}());

var NgxImgCropComponent = /** @class */ (function () {
    function NgxImgCropComponent(_service, _elementRef, _ref) {
        this._service = _service;
        this._elementRef = _elementRef;
        this._ref = _ref;
        this.config = {};
        this.onCrop = new EventEmitter();
        this.onReset = new EventEmitter();
        this._text = {
            reset: 'Remove'
        };
        this._config = {
            crop: [
                {
                    ratio: null,
                    viewMode: 0,
                }
            ]
        };
        this.timer = [];
        this.cropper = [];
        this.imgData = [];
    }
    NgxImgCropComponent.prototype.ngOnInit = function () {
        this._config = Object.assign(this._config, this.config);
        this.cropper = [];
        this.imgData = [];
        this.initializeCrop();
    };
    NgxImgCropComponent.prototype.initializeCrop = function () {
        var _this = this;
        setTimeout(function () {
            var mimeType = getMimeType(_this.imgSrc);
            _this._config.crop.forEach(function (opt, i) {
                var el = _this._elementRef.nativeElement.querySelector('#ngx-crop-img-' + i);
                var options = {};
                if (opt.width) {
                    options.width = opt.width;
                }
                if (opt.height) {
                    options.height = opt.height;
                }
                if (opt.minWidth) {
                    options.minWidth = opt.minWidth;
                }
                if (opt.minHeight) {
                    options.minHeight = opt.minHeight;
                }
                if (opt.maxWidth) {
                    options.maxWidth = opt.maxWidth;
                }
                if (opt.maxHeight) {
                    options.maxHeight = opt.maxHeight;
                }
                _this.cropper[i] = new Cropper(el, {
                    aspectRatio: opt.ratio,
                    viewMode: opt.viewMode || 0,
                    autoCropArea: opt.autoCropArea || 0.8,
                    crop: function () {
                        if (_this.timer[i]) {
                            clearTimeout(_this.timer[i]);
                        }
                        _this.timer[i] = setTimeout(function () {
                            _this.onCropEvent(i, _this.cropper[i].getCroppedCanvas(options).toDataURL(mimeType));
                            _this.markForCheck();
                        }, 500);
                    }
                });
                _this.markForCheck();
            });
            _this.markForCheck();
        }, 100);
    };
    NgxImgCropComponent.prototype.onCropEvent = function (i, data) {
        var _this = this;
        this._service.compress(data, this._config).then(function (res) {
            _this.imgData[i] = res;
            var img = _this.imgData.length === 1 ? _this.imgData[i] : _this.imgData;
            _this.onCrop.emit(img);
            _this.markForCheck();
        })
            .catch(function () {
            _this.imgData[i] = data;
            var img = _this.imgData.length === 1 ? _this.imgData[i] : _this.imgData;
            _this.onCrop.emit(img);
            _this.markForCheck();
        });
    };
    NgxImgCropComponent.prototype.reset = function () {
        this.cropper.forEach(function (el) {
            if (el) {
                el.destroy();
            }
        });
        this.cropper = [];
        this.imgData = [];
        this.imgSrc = '';
        this.onReset.emit();
        this.markForCheck();
    };
    NgxImgCropComponent.prototype.markForCheck = function () {
        var _this = this;
        setTimeout(function () {
            if (!_this._ref['destroyed']) {
                _this._ref.markForCheck();
                _this._ref.detectChanges();
            }
        });
        setTimeout(function () {
            if (!_this._ref['destroyed']) {
                _this._ref.markForCheck();
                _this._ref.detectChanges();
            }
        }, 300);
    };
    NgxImgCropComponent.prototype.ngOnDestroy = function () {
        this.reset();
        this._ref.detach();
    };
    NgxImgCropComponent.ctorParameters = function () { return [
        { type: NgxImgService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NgxImgCropComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], NgxImgCropComponent.prototype, "imgSrc", void 0);
    __decorate([
        Output()
    ], NgxImgCropComponent.prototype, "onCrop", void 0);
    __decorate([
        Output()
    ], NgxImgCropComponent.prototype, "onReset", void 0);
    NgxImgCropComponent = __decorate([
        Component({
            selector: 'ngx-img-crop',
            template: "<div class=\"ngx-img-crop-wrapper\" [style.height]=\"_config.height\">\n  <button type=\"button\" class=\"ngx-img-clear\" (click)=\"reset()\">{{ _text.reset }}</button>\n  <ng-template ngFor [ngForOf]=\"_config.crop\" let-i=\"index\">\n    <div class=\"ngx-img-crop-col\">\n      <img [id]=\"'ngx-crop-img-' + i\" [src]=\"imgSrc\">\n    </div>\n  </ng-template>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-img-crop-wrapper{display:flex;justify-content:stretch;align-items:stretch;position:relative;cursor:pointer;overflow:hidden;width:100%;max-width:100%;height:400px;font-family:Helvetica,Arial,sans-serif;font-size:14px;font-weight:300;line-height:22px;color:#333;background-color:#fff;background-image:none;text-align:center;border:2px solid #e5e5e5;box-sizing:content-box}.ngx-img-crop-wrapper .ngx-img-clear{display:block;position:absolute;opacity:0;z-index:7;top:10px;right:10px;background:0 0;border:2px solid #fff;text-transform:uppercase;font-family:Helvetica,Arial;font-size:11px;padding:4px 8px;font-weight:700;color:#fff;transition:.15s linear}.ngx-img-crop-wrapper .ngx-img-clear:hover{background:rgba(255,255,255,.2)}.ngx-img-crop-wrapper:hover .ngx-img-clear{opacity:1}.ngx-img-crop-wrapper .ngx-img-crop-col{display:flex;flex:1;margin:5px;box-sizing:content-box}.ngx-img-crop-wrapper .ngx-img-crop-col>img{position:relative;max-width:100%;max-height:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-container{direction:ltr;font-size:0;line-height:0;position:relative;touch-action:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-container img{display:block;height:100%;image-orientation:0deg;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-canvas,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-crop-box,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-drag-box,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-modal,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-wrap-box{bottom:0;left:0;position:absolute;right:0;top:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-canvas,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-wrap-box{overflow:hidden}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-drag-box{background-color:#fff;opacity:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-modal{background-color:#000;opacity:.5}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-view-box{display:block;height:100%;outline:#17a2c4 solid 1px;overflow:hidden;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-dashed{border:0 dashed #eee;display:block;opacity:.5;position:absolute}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-dashed.dashed-h{border-bottom-width:1px;border-top-width:1px;height:33.33333%;left:0;top:33.33333%;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-dashed.dashed-v{border-left-width:1px;border-right-width:1px;height:100%;left:33.33333%;top:0;width:33.33333%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center{display:block;height:0;left:50%;opacity:.75;position:absolute;top:50%;width:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:after,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:before{background-color:#eee;content:\" \";display:block;position:absolute}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:before{height:1px;left:-3px;top:0;width:7px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:after{height:7px;left:0;top:-3px;width:1px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-face,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point{display:block;height:100%;opacity:.1;position:absolute;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-face{background-color:#fff;left:0;top:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line{background-color:#17a2c4}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-e{cursor:e-resize;right:-3px;top:0;width:5px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-n{cursor:n-resize;height:5px;left:0;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-w{cursor:w-resize;left:-3px;top:0;width:5px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-s{bottom:-3px;cursor:s-resize;height:5px;left:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point{background-color:#17a2c4;height:5px;opacity:.75;width:5px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-e{cursor:e-resize;margin-top:-3px;right:-3px;top:50%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-n{cursor:n-resize;left:50%;margin-left:-3px;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-w{cursor:w-resize;left:-3px;margin-top:-3px;top:50%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-s{bottom:-3px;cursor:s-resize;left:50%;margin-left:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-ne{cursor:ne-resize;right:-3px;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-nw{cursor:nw-resize;left:-3px;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-sw{bottom:-3px;cursor:sw-resize;left:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{bottom:-3px;cursor:se-resize;height:20px;opacity:1;right:-3px;width:20px}@media (min-width:768px){.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{height:15px;width:15px}}@media (min-width:992px){.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{height:10px;width:10px}}@media (min-width:1200px){.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{height:5px;opacity:.75;width:5px}}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se:before{background-color:#17a2c4;bottom:-50%;content:\" \";display:block;height:200%;opacity:0;position:absolute;right:-50%;width:200%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-invisible{opacity:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-hide{display:block;height:0;position:absolute;width:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-hidden{display:none!important}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-move{cursor:move}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-crop{cursor:crosshair}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-drag-box,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-face,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-line,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-point{cursor:not-allowed}"]
        })
    ], NgxImgCropComponent);
    return NgxImgCropComponent;
}());

var NgxImgModule = /** @class */ (function () {
    function NgxImgModule() {
    }
    NgxImgModule_1 = NgxImgModule;
    NgxImgModule.forRoot = function () {
        return {
            ngModule: NgxImgModule_1,
            providers: [NgxImgService]
        };
    };
    var NgxImgModule_1;
    NgxImgModule = NgxImgModule_1 = __decorate([
        NgModule({
            imports: [
                CommonModule,
                FormsModule
            ],
            exports: [NgxImgComponent, NgxImgCropComponent],
            declarations: [NgxImgComponent, NgxImgCropComponent],
            providers: [NgxImgService]
        })
    ], NgxImgModule);
    return NgxImgModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { NgxImgComponent, NgxImgCropComponent, NgxImgModule, NgxImgService };
//# sourceMappingURL=ngx-img.js.map
