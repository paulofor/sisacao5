import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation, ElementRef } from '@angular/core';
import Cropper from 'cropperjs';
import { NgxImgService } from '../service/ngx-img.service';
import { getMimeType } from '../utils';
var NgxImgCropComponent = /** @class */ (function () {
    function NgxImgCropComponent(_service, _elementRef, _ref) {
        this._service = _service;
        this._elementRef = _elementRef;
        this._ref = _ref;
        this.config = {};
        this.onCrop = new EventEmitter();
        this.onReset = new EventEmitter();
        this._text = {
            reset: 'Remove'
        };
        this._config = {
            crop: [
                {
                    ratio: null,
                    viewMode: 0,
                }
            ]
        };
        this.timer = [];
        this.cropper = [];
        this.imgData = [];
    }
    NgxImgCropComponent.prototype.ngOnInit = function () {
        this._config = Object.assign(this._config, this.config);
        this.cropper = [];
        this.imgData = [];
        this.initializeCrop();
    };
    NgxImgCropComponent.prototype.initializeCrop = function () {
        var _this = this;
        setTimeout(function () {
            var mimeType = getMimeType(_this.imgSrc);
            _this._config.crop.forEach(function (opt, i) {
                var el = _this._elementRef.nativeElement.querySelector('#ngx-crop-img-' + i);
                var options = {};
                if (opt.width) {
                    options.width = opt.width;
                }
                if (opt.height) {
                    options.height = opt.height;
                }
                if (opt.minWidth) {
                    options.minWidth = opt.minWidth;
                }
                if (opt.minHeight) {
                    options.minHeight = opt.minHeight;
                }
                if (opt.maxWidth) {
                    options.maxWidth = opt.maxWidth;
                }
                if (opt.maxHeight) {
                    options.maxHeight = opt.maxHeight;
                }
                _this.cropper[i] = new Cropper(el, {
                    aspectRatio: opt.ratio,
                    viewMode: opt.viewMode || 0,
                    autoCropArea: opt.autoCropArea || 0.8,
                    crop: function () {
                        if (_this.timer[i]) {
                            clearTimeout(_this.timer[i]);
                        }
                        _this.timer[i] = setTimeout(function () {
                            _this.onCropEvent(i, _this.cropper[i].getCroppedCanvas(options).toDataURL(mimeType));
                            _this.markForCheck();
                        }, 500);
                    }
                });
                _this.markForCheck();
            });
            _this.markForCheck();
        }, 100);
    };
    NgxImgCropComponent.prototype.onCropEvent = function (i, data) {
        var _this = this;
        this._service.compress(data, this._config).then(function (res) {
            _this.imgData[i] = res;
            var img = _this.imgData.length === 1 ? _this.imgData[i] : _this.imgData;
            _this.onCrop.emit(img);
            _this.markForCheck();
        })
            .catch(function () {
            _this.imgData[i] = data;
            var img = _this.imgData.length === 1 ? _this.imgData[i] : _this.imgData;
            _this.onCrop.emit(img);
            _this.markForCheck();
        });
    };
    NgxImgCropComponent.prototype.reset = function () {
        this.cropper.forEach(function (el) {
            if (el) {
                el.destroy();
            }
        });
        this.cropper = [];
        this.imgData = [];
        this.imgSrc = '';
        this.onReset.emit();
        this.markForCheck();
    };
    NgxImgCropComponent.prototype.markForCheck = function () {
        var _this = this;
        setTimeout(function () {
            if (!_this._ref['destroyed']) {
                _this._ref.markForCheck();
                _this._ref.detectChanges();
            }
        });
        setTimeout(function () {
            if (!_this._ref['destroyed']) {
                _this._ref.markForCheck();
                _this._ref.detectChanges();
            }
        }, 300);
    };
    NgxImgCropComponent.prototype.ngOnDestroy = function () {
        this.reset();
        this._ref.detach();
    };
    NgxImgCropComponent.ctorParameters = function () { return [
        { type: NgxImgService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NgxImgCropComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], NgxImgCropComponent.prototype, "imgSrc", void 0);
    __decorate([
        Output()
    ], NgxImgCropComponent.prototype, "onCrop", void 0);
    __decorate([
        Output()
    ], NgxImgCropComponent.prototype, "onReset", void 0);
    NgxImgCropComponent = __decorate([
        Component({
            selector: 'ngx-img-crop',
            template: "<div class=\"ngx-img-crop-wrapper\" [style.height]=\"_config.height\">\n  <button type=\"button\" class=\"ngx-img-clear\" (click)=\"reset()\">{{ _text.reset }}</button>\n  <ng-template ngFor [ngForOf]=\"_config.crop\" let-i=\"index\">\n    <div class=\"ngx-img-crop-col\">\n      <img [id]=\"'ngx-crop-img-' + i\" [src]=\"imgSrc\">\n    </div>\n  </ng-template>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-img-crop-wrapper{display:flex;justify-content:stretch;align-items:stretch;position:relative;cursor:pointer;overflow:hidden;width:100%;max-width:100%;height:400px;font-family:Helvetica,Arial,sans-serif;font-size:14px;font-weight:300;line-height:22px;color:#333;background-color:#fff;background-image:none;text-align:center;border:2px solid #e5e5e5;box-sizing:content-box}.ngx-img-crop-wrapper .ngx-img-clear{display:block;position:absolute;opacity:0;z-index:7;top:10px;right:10px;background:0 0;border:2px solid #fff;text-transform:uppercase;font-family:Helvetica,Arial;font-size:11px;padding:4px 8px;font-weight:700;color:#fff;transition:.15s linear}.ngx-img-crop-wrapper .ngx-img-clear:hover{background:rgba(255,255,255,.2)}.ngx-img-crop-wrapper:hover .ngx-img-clear{opacity:1}.ngx-img-crop-wrapper .ngx-img-crop-col{display:flex;flex:1;margin:5px;box-sizing:content-box}.ngx-img-crop-wrapper .ngx-img-crop-col>img{position:relative;max-width:100%;max-height:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-container{direction:ltr;font-size:0;line-height:0;position:relative;touch-action:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-container img{display:block;height:100%;image-orientation:0deg;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-canvas,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-crop-box,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-drag-box,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-modal,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-wrap-box{bottom:0;left:0;position:absolute;right:0;top:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-canvas,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-wrap-box{overflow:hidden}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-drag-box{background-color:#fff;opacity:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-modal{background-color:#000;opacity:.5}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-view-box{display:block;height:100%;outline:#17a2c4 solid 1px;overflow:hidden;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-dashed{border:0 dashed #eee;display:block;opacity:.5;position:absolute}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-dashed.dashed-h{border-bottom-width:1px;border-top-width:1px;height:33.33333%;left:0;top:33.33333%;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-dashed.dashed-v{border-left-width:1px;border-right-width:1px;height:100%;left:33.33333%;top:0;width:33.33333%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center{display:block;height:0;left:50%;opacity:.75;position:absolute;top:50%;width:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:after,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:before{background-color:#eee;content:\" \";display:block;position:absolute}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:before{height:1px;left:-3px;top:0;width:7px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-center:after{height:7px;left:0;top:-3px;width:1px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-face,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point{display:block;height:100%;opacity:.1;position:absolute;width:100%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-face{background-color:#fff;left:0;top:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line{background-color:#17a2c4}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-e{cursor:e-resize;right:-3px;top:0;width:5px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-n{cursor:n-resize;height:5px;left:0;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-w{cursor:w-resize;left:-3px;top:0;width:5px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-line.line-s{bottom:-3px;cursor:s-resize;height:5px;left:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point{background-color:#17a2c4;height:5px;opacity:.75;width:5px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-e{cursor:e-resize;margin-top:-3px;right:-3px;top:50%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-n{cursor:n-resize;left:50%;margin-left:-3px;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-w{cursor:w-resize;left:-3px;margin-top:-3px;top:50%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-s{bottom:-3px;cursor:s-resize;left:50%;margin-left:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-ne{cursor:ne-resize;right:-3px;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-nw{cursor:nw-resize;left:-3px;top:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-sw{bottom:-3px;cursor:sw-resize;left:-3px}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{bottom:-3px;cursor:se-resize;height:20px;opacity:1;right:-3px;width:20px}@media (min-width:768px){.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{height:15px;width:15px}}@media (min-width:992px){.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{height:10px;width:10px}}@media (min-width:1200px){.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se{height:5px;opacity:.75;width:5px}}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-point.point-se:before{background-color:#17a2c4;bottom:-50%;content:\" \";display:block;height:200%;opacity:0;position:absolute;right:-50%;width:200%}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-invisible{opacity:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-hide{display:block;height:0;position:absolute;width:0}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-hidden{display:none!important}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-move{cursor:move}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-crop{cursor:crosshair}.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-drag-box,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-face,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-line,.ngx-img-crop-wrapper .ngx-img-crop-col .cropper-disabled .cropper-point{cursor:not-allowed}"]
        })
    ], NgxImgCropComponent);
    return NgxImgCropComponent;
}());
export { NgxImgCropComponent };
//# sourceMappingURL=data:application/json;base64,