import { Component, Input, Output, EventEmitter, NgZone, Renderer, NgModule } from '@angular/core';
import { timer } from 'rxjs';

var UploadFile = /** @class */ (function () {
    function UploadFile(relativePath, fileEntry) {
        this.relativePath = relativePath;
        this.fileEntry = fileEntry;
    }
    return UploadFile;
}());
var UploadEvent = /** @class */ (function () {
    function UploadEvent(files) {
        this.files = files;
    }
    return UploadEvent;
}());
var FileComponent = /** @class */ (function () {
    function FileComponent(zone, renderer) {
        var _this = this;
        this.zone = zone;
        this.renderer = renderer;
        this.headertext = '';
        this.customstyle = null;
        this.disableIf = false;
        this.onFileDrop = new EventEmitter();
        this.onFileOver = new EventEmitter();
        this.onFileLeave = new EventEmitter();
        this.stack = [];
        this.files = [];
        this.dragoverflag = false;
        this.globalDisable = false;
        this.numOfActiveReadEntries = 0;
        if (!this.customstyle) {
            this.customstyle = 'drop-zone';
        }
        this.globalStart = this.renderer.listen('document', 'dragstart', function (evt) {
            _this.globalDisable = true;
        });
        this.globalEnd = this.renderer.listen('document', 'dragend', function (evt) {
            _this.globalDisable = false;
        });
    }
    FileComponent.prototype.onDragOver = function (event) {
        if (!this.globalDisable && !this.disableIf) {
            if (!this.dragoverflag) {
                this.dragoverflag = true;
                this.onFileOver.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    FileComponent.prototype.onDragLeave = function (event) {
        if (!this.globalDisable && !this.disableIf) {
            if (this.dragoverflag) {
                this.dragoverflag = false;
                this.onFileLeave.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    FileComponent.prototype.dropFiles = function (event) {
        var _this = this;
        if (!this.globalDisable && !this.disableIf) {
            this.dragoverflag = false;
            event.dataTransfer.dropEffect = 'copy';
            var length = void 0;
            if (event.dataTransfer.items) {
                length = event.dataTransfer.items.length;
            }
            else {
                length = event.dataTransfer.files.length;
            }
            var _loop_1 = function (i) {
                var entry = void 0;
                if (event.dataTransfer.items) {
                    if (event.dataTransfer.items[i].webkitGetAsEntry) {
                        entry = event.dataTransfer.items[i].webkitGetAsEntry();
                    }
                }
                else {
                    if (event.dataTransfer.files[i].webkitGetAsEntry) {
                        entry = event.dataTransfer.files[i].webkitGetAsEntry();
                    }
                }
                if (!entry) {
                    var file_1 = event.dataTransfer.files[i];
                    if (file_1) {
                        var fakeFileEntry = {
                            name: file_1.name,
                            isDirectory: false,
                            isFile: true,
                            file: function (callback) {
                                callback(file_1);
                            }
                        };
                        var toUpload = new UploadFile(fakeFileEntry.name, fakeFileEntry);
                        this_1.addToQueue(toUpload);
                    }
                }
                else {
                    if (entry.isFile) {
                        var toUpload = new UploadFile(entry.name, entry);
                        this_1.addToQueue(toUpload);
                    }
                    else if (entry.isDirectory) {
                        this_1.traverseFileTree(entry, entry.name);
                    }
                }
            };
            var this_1 = this;
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
            this.preventAndStop(event);
            var timerObservable = timer(200, 200);
            this.subscription = timerObservable.subscribe(function (t) {
                if (_this.files.length > 0 && _this.numOfActiveReadEntries === 0) {
                    _this.onFileDrop.emit(new UploadEvent(_this.files));
                    _this.files = [];
                }
            });
        }
    };
    FileComponent.prototype.traverseFileTree = function (item, path) {
        var _this = this;
        if (item.isFile) {
            var toUpload = new UploadFile(path, item);
            this.files.push(toUpload);
            this.zone.run(function () {
                _this.popToStack();
            });
        }
        else {
            this.pushToStack(path);
            path = path + '/';
            var dirReader_1 = ((item)).createReader();
            var entries_1 = [];
            var thisObj_1 = this;
            var readEntries_1 = function () {
                thisObj_1.numOfActiveReadEntries++;
                dirReader_1.readEntries(function (res) {
                    if (!res.length) {
                        if (entries_1.length === 0) {
                            var toUpload_1 = new UploadFile(path, item);
                            thisObj_1.zone.run(function () {
                                thisObj_1.addToQueue(toUpload_1);
                            });
                        }
                        else {
                            var _loop_2 = function (i) {
                                thisObj_1.zone.run(function () {
                                    thisObj_1.traverseFileTree(entries_1[i], path + entries_1[i].name);
                                });
                            };
                            for (var i = 0; i < entries_1.length; i++) {
                                _loop_2(i);
                            }
                        }
                        thisObj_1.zone.run(function () {
                            thisObj_1.popToStack();
                        });
                    }
                    else {
                        entries_1 = entries_1.concat(res);
                        readEntries_1();
                    }
                    thisObj_1.numOfActiveReadEntries--;
                });
            };
            readEntries_1();
        }
    };
    FileComponent.prototype.addToQueue = function (item) {
        this.files.push(item);
    };
    FileComponent.prototype.pushToStack = function (str) {
        this.stack.push(str);
    };
    FileComponent.prototype.popToStack = function () {
        var value = this.stack.pop();
    };
    FileComponent.prototype.clearQueue = function () {
        this.files = [];
    };
    FileComponent.prototype.preventAndStop = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.globalStart();
        this.globalEnd();
    };
    return FileComponent;
}());
FileComponent.decorators = [
    { type: Component, args: [{
                selector: 'file-drop',
                template: "<div id=\"dropZone\"  [className]=\"customstyle\" [class.over]=\"dragoverflag\"\n    (drop)=\"dropFiles($event)\"\n    (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\">\n    <div class=\"content\">\n        <ng-content></ng-content>\n        {{headertext}}\n    </div>\n</div>\n",
                styles: [".drop-zone{margin:auto;height:100px;border:2px dotted #0782d0;border-radius:30px}.content{color:#0782d0;height:100px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.over{background-color:rgba(147,147,147,.5)}"]
            },] },
];
FileComponent.ctorParameters = function () { return [
    { type: NgZone, },
    { type: Renderer, },
]; };
FileComponent.propDecorators = {
    "headertext": [{ type: Input },],
    "customstyle": [{ type: Input },],
    "disableIf": [{ type: Input },],
    "onFileDrop": [{ type: Output },],
    "onFileOver": [{ type: Output },],
    "onFileLeave": [{ type: Output },],
};
var FileDropModule = /** @class */ (function () {
    function FileDropModule() {
    }
    return FileDropModule;
}());
FileDropModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FileComponent,
                ],
                exports: [FileComponent],
                imports: [],
                providers: [],
                bootstrap: [FileComponent],
            },] },
];

export { FileComponent, FileDropModule, UploadFile, UploadEvent };
//# sourceMappingURL=ngx-file-drop.js.map
